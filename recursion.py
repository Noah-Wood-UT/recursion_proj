"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Noah Wood and Luis Higareda, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: nww376
UT EID 2: leh3479
"""


def group_sum(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to the
    given target.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if start >= len(nums):
        return target == 0
    target -= nums[start]
    if group_sum(start+1, nums, target):
        return True
    target += nums[start]

    return group_sum(start+1, nums, target)


def group_sum_6(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to the
    given target. Additionally, if there is are 6's present in the array, they must all
    be chosen.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """

    if start >= len(nums):
        return target == 0
    if nums[start] == 6:
        target -=6
        return group_sum_6(start+1, nums, target)
    target -= nums[start]
    if group_sum_6(start+1, nums, target):
        return True
    target += nums[start]

    return group_sum_6(start+1, nums, target)


def group_no_adj(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to
    the given target. Additionally, if a value is chosen, the value immediately after
    (the value adjacent) cannot be chosen.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if start >= len(nums):
        return target == 0
    target -= nums[start]
    if group_no_adj(start+2, nums, target):
        return True
    target += nums[start]
    return group_no_adj(start+1, nums, target)

#one error
def group_sum_5(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to
    the given target. Additionally, if a multiple of 5 is in the array, it must be included
    If the value immediately following a multiple of 5 if 1, it must not be chosen

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """

    if start >= len(nums):
        return target == 0
    #include 5 multiples
    if nums[start] % 5 == 0:
        target -= nums[start]
        return group_sum_5(start+1, nums, target)
    #disclude 1 after 5 multiples
    if nums[start] == 1 and nums[start - 1] % 5 == 0:
        return group_sum_5(start+1, nums, target)
    target -= nums[start]
    if group_sum_5(start+1, nums, target):
        return True
    target += nums[start]
    return group_sum_5(start+1, nums, target)


def group_sum_clump(start, nums, target):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to
    the given target. Additionally, if there is a group of identical numbers in succession,
    they must all be chosen, or none of them must be chosen.
    EX: [1, 2, 2, 2, 5, 2], all three of the middle 2's must be chosen, or none of them must be
    chosen to be included in the sum. One loop is allowed to check for identical numbers.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if start >= len(nums):
        return target == 0
    #check if clump
    if start+1 < len(nums) and nums[start+1] == nums[start]:
        #get total clump value
        clump_num = nums[start]
        next_start = start + 1
        while next_start < len(nums) and nums[next_start] == nums[start]:
            clump_num += nums[start]
            next_start += 1
        #with clump check
        target -= clump_num
        if group_sum_clump(next_start, nums, target):
            return True
        #without clump check
        target += clump_num
        return group_sum_clump(next_start, nums, target)
    #if not a clump
    target -= nums[start]
    if group_sum_clump(start+1, nums, target):
        return True
    target += nums[start]
    return group_sum_clump(start+1, nums, target)



def split_array(nums):
    """
    Given a list of ints, determine if the numbers can be split evenly into two groups
    The sum of these two groups must be equal
    Write a recursive helper to call from this function

    pre: len(nums) >= 0, nums will only contain ints
    post: return True if nums can be split, False otherwise
    """
    sum1 = 0
    for i in nums:
        sum1 += i
    half_sum = sum1//2
    if len(nums) == 0:
        return True
    if sum1%2 != 0 :
        return False
    return bool(split_array_helper(0, nums[len(nums)//2: ], half_sum))


def split_array_helper(start, nums, half_sum):
    """
    Given a list of ints, determine if there exists a group of some ints that sum to the
    given target.

    pre: start >= 0, len(nums) >= 0, target >= 0, nums will only contain ints
    post: return True if nums has a group of ints that sum to target, False otherwise
    """
    if start >= len(nums):
        return half_sum == 0
    half_sum -= nums[start]
    if split_array_helper(start+1, nums, half_sum):
        return True
    half_sum += nums[start]
    if split_array_helper(start+1, nums, half_sum):
        return True
    return False


def split_odd_10(nums):
    """
    Given a list of ints, determine if the numbers can be split evenly into two groups
    The sum of one group must be odd, while the other group must be a multiple of 10
    Write a recursive helper to call from this function

    pre: len(nums) >= 0, nums will only contain ints
    post: return True if nums can be split, False otherwise
    """

    if len(nums) == 0:
        return False
    return bool(split_odd_10_helper(0, nums, 0, 0))

def split_odd_10_helper(start, nums, sum_odd , sum_10 ):
    "pylint happy"
    if start == len(nums):
        return (sum_odd % 2 == 1 and sum_10 % 10 == 0)
    sum_odd += nums[start]
    if split_odd_10_helper(start+1, nums, sum_odd, sum_10):
        return True
    sum_odd -= nums[start]
    sum_10 += nums[start]
    if split_odd_10_helper(start+1, nums, sum_odd, sum_10):
        return True
    return False

def split_53(nums):
    """
    Given a list of ints, determine if the numbers can be split evenly into two groups
    The sum of these two groups must be equal
    Additionally, all multiples of 5 must be in one group, and all multiples of 3 (and not 5)
    must be in the other group
    Write a recursive helper to call from this function

    pre: len(nums) >= 0, nums will only contain ints
    post: return True if nums can be split, False otherwise
    """
    if len(nums) == 0:
        return True
    return bool(split_53_helper(0, nums, 0, 0))


def split_53_helper(start, nums, sum_5 , sum_3 ):
    "pylint happy"
    if start == len(nums):
        if sum_5 == sum_3:
            return (sum_5 % 5 == 0 or sum_5 % 5 == 1) or (sum_3 % 3 == 0 or sum_3 % 3 == 1)
        return False
    sum_5 += nums[start]
    if split_53_helper(start+1, nums, sum_5, sum_3):
        return True
    sum_5 -= nums[start]
    sum_3 += nums[start]
    if split_53_helper(start+1, nums, sum_5, sum_3):
        return True
    return False